Understainding Kyle's reduction procedure, implemented after the PIRL.
----------------------------------------------------------------------
----------------------------------------------------------------------

Pre-PIRL
--------

+1. Splitting field, roots of g in splitting field, OL
2. Precision loop; initiate
   a. real precision multiplier
   b. p adic precision multiplier
   c. precisionloopvariable (from 1-5; terminate algorithm if reaches 5) underwhich estimate
      realpreicision, padic precision; SetDefaultRealField(RealField(realprecision));
      PI:=Pi(RealField());
3. Splitting of primes, generate theta
4. Image of integral basis for K in Qp under theta -> theta[L][i][j]; image of gammas, eps under
   this map
5. Image of integral basis for K in C under theta -> conjugates(theta)[i]; image of gammas, eps
   under this map
6. Generate conjugates of theta in L (splitting field)
7. Image of integral basis for K in L under theta -> conjugates(L)[i]; image of gammas, eps
   under this map

PIRL
----

1. Iterate through PIRL
2. Build list of cases, discard those without principal ideal a

Per Case
--------

1. Image of zeta, alpha in Qp
2. Image of zeta, alpha in C
3. Determine i0; initialize value of n_l (where known), Nstar (bounds on n_l); ihat, istar,
   SpecialCase set (all as empty sets)
4. Initialize delta1,delta2 in Qp as Qp! 1 (where Qp = completion of L at prime ideal)
   (theta[L][i][j] lives in this Qp)
5. Iterate through possibilities for j,k so that Ord_p(delta1) ne 0
   NB. this seems to never be possible for us;
   NB. i0 is fixed and determined by the unbounded prime ideal
6. For each unbounded prime ideal, iterate through possible j,k to compute delta1,delta2 in Qp
   for which Lemma 3.5.5 holds
       a. Determine pAdicLog(delta1), pAdicLog(gammas in Qp), pAdicLog(eps in Qp)
       CHECK IsZeroLocal(pAdicLog(delta1) - WHAT IS THIS?
       CHECK GetCoefficients(pAdicLog(all elts above) - WHAT IS THIS?
       b. Check if Valuation(pAdicLog(delta1) < Min(Valuation(pAdicLog(elts)))
       CHECK IsZeroLocal(CoeffientsLogAlpha) - WHAT IS THIS?
       c. Check if Lemma 3.5.5(b) holds using coefficients
7. If cannot find j,k for which lemma 3.5.5 holds, choose j,k according to remaining guidelines
   (ie. in such a way that alpha_i/alpha_{ihat} is in Zp for all i,j (Special Case)
   NB. We are always in the Special Case, so this can always be done
8. For each unbounded prime ideal in the Special Case, determine ihat, istar, beta_i's
   CHECK GetCoefficients(beta) - WHAT IS THIS?
9.




0. Initate precision loop;
   Set p-adic, real, complex precision; this will end after going through all cases.

1. Iterate through each case.

2. Generate image of zeta, alpha

3. Determine i0,j,k based on when we can compute n_l, bound n_l, or use basic/refined reduction techniques.
   For each prime p[l]:
       a. Try to find i0,j,k so that we can compute n_l directly. If this is possible, absorb n_l
          into alpha.
       b. If (a) fails, try to find i0,j,k so that we can get a (smaller) bound on n_l
   Generate the following sets:
       JJ:= set of indices l in {1..v} such that there is an unbounded prime
       J:= set of indices l in {1..v} such that there is an unbounded prime above p[l] and (a) is
           not possible (can't compute n_l directly)
       JJJ:= {1} cat {1+l : l in J} cat {1+v+i : i in {1..r}}, all indices needed for reduction
       I:= set of l in J for which we (b) does not hold (can't compute small bound on n_l)
       I2:= J\I, set of l in J for which (b) holds
   Compute delta1, delta2 for each l in J, and the linear forms in p-adic logs
   Determine if we are in the special case, alpha_i/alpha_ihat is in Qp for all i and some ihat
       NB. this should always be true for deg 3

4. Determine preimage of elements in Lp, C under the embedding L -> Lp, L -> C resp

5. Determine large upper bound via Yu's lemma

6. Initialize height bounds to be large upper bound, basic reduction

7. Refined reduction, start loop:
       ExceptionalTuples:= [];
       Improvement:= true;
       while Improvement do
       Improvement:= false;

   Check if number of tuples to sieve through is small; if < 5,000,000, jump directly to sieve via
   "break".
   Check if number of exceptional tuples has grown excessively large, > 100,000, jump directly to
   sieve via "break".

   p-Adic Reduction: for l in I do
       Compute mu_0 using a heuristic
       Start loop: increase m until p[l]-adic reduction yields a new upper bound for n_l or until
       a number of increases has made no difference
           flag:= true;
	   RunThroughNumber:=0;
	   while flag do
	   Increase mu_0 if not the first attempt

	   Compute new upper bound for n[l]; if better than old bound, proceed, else continue to
	   next l

	   Generate matrix Am, compute LLL matrix Bm
	   Compute vector y, including ihat
	   Find closest vector
	   Construct lattice Gamma_m:= Lattice(Transpose(Bm));

	   If the number of nodes is too large (proportional to time needed for enumeration),
	   increase m and try the reduction procedure again. If several small increases of m fail
	   to result in a small enough estimate for the number of nodes, move to next l in I,
	   EnumerationCost.

	   If EnumertaionCost > 6,000,000, RunThroughNumber:=+1;
	       if RunThroughNumber eq 20, continue l; else flag:= false;
	           ShortVectorProcess, extract tuples, add tuples to ExceptionalTuplesInsideLoop,
		   basic tests

		   Improvement:= true;
		   UpperBoundForn:= NewUpperBound

8. UpperBoundForN:= Max(UpperBoundForn);
